import heapq

# Function to check if the puzzle is in the goal state
def is_goal(state, goal_state):
    return state == goal_state

# Function to calculate the Misplaced Tiles heuristic
def misplaced_tiles(state, goal_state):
    count = 0
    for i in range(len(state)):
        if state[i] != goal_state[i] and state[i] != 0:  # Exclude the blank tile (0)
            count += 1
    return count

# Function to find possible moves (successors) from the current state
def get_successors(state):
    successors = []
    blank_idx = state.index(0)  # Find the index of the blank (0)

    # Possible moves: up, down, left, right
    moves = {
        "up": -3, "down": 3, "left": -1, "right": 1
    }

    for direction, move in moves.items():
        new_idx = blank_idx + move
        if 0 <= new_idx < 9:  # Check if the move is within bounds
            if direction == "left" and blank_idx % 3 == 0:
                continue  # Skip invalid move to the left
            if direction == "right" and blank_idx % 3 == 2:
                continue  # Skip invalid move to the right
            new_state = state[:]
            new_state[blank_idx], new_state[new_idx] = new_state[new_idx], new_state[blank_idx]
            successors.append(new_state)

    return successors

# A* Algorithm using Misplaced Tiles heuristic
def astar_misplaced_tiles(start_state, goal_state):
    open_list = []
    closed_list = set()

    # Push the initial state into the priority queue (heap), with f = g + h
    initial_h = misplaced_tiles(start_state, goal_state)
    heapq.heappush(open_list, (initial_h, 0, start_state, []))

    print(f"\nLevel 0 (Initial State):")
    display_states_side_by_side([start_state])  # Display the start state
    print(f"g(n) = 0, h(n) = {initial_h}, f(n) = {initial_h}\n")

    level = 1  # Track levels for display

    while open_list:
        f, g, current_state, path = heapq.heappop(open_list)

        if is_goal(current_state, goal_state):
            return path + [current_state]  # Return the path when goal is reached

        if tuple(current_state) in closed_list:
            continue

        closed_list.add(tuple(current_state))

        # Expand the current node (find successors)
        level_states = []
        for successor in get_successors(current_state):
            if tuple(successor) not in closed_list:
                new_g = g + 1  # Increment the cost to reach the successor
                new_h = misplaced_tiles(successor, goal_state)
                new_f = new_g + new_h
                heapq.heappush(open_list, (new_f, new_g, successor, path + [current_state]))
                level_states.append((successor, new_g, new_h, new_f))

        if level_states:
            print(f"\nLevel {level}:")
            for state_info in level_states:
                state, new_g, new_h, new_f = state_info
                display_states_side_by_side([state])
                print(f"g(n) = {new_g}, h(n) = {new_h}, f(n) = {new_f}\n")
            level += 1

    return None  # No solution found

# Function to display the 8-puzzle in a readable format, multiple states side by side
def display_states_side_by_side(states):
    lines = [""] * 3  # Each puzzle has 3 lines

    for state in states:
        for i in range(0, 9, 3):
            lines[i // 3] += f"{state[i:i+3]}    "

    for line in lines:
        print(line)

# Main function to take input and run the A* algorithm
def main():
    print("Enter the start state of the 8-puzzle (9 numbers, use 0 for the blank tile):")
    start_state = list(map(int, input().split()))

    print("Enter the goal state of the 8-puzzle (9 numbers, use 0 for the blank tile):")
    goal_state = list(map(int, input().split()))

    print("\nSolving the 8-puzzle...\n")

    solution = astar_misplaced_tiles(start_state, goal_state)

    if solution:
        print("\nSolution Path Found!")
        for step, state in enumerate(solution):
            print(f"Step {step}:")
            display_states_side_by_side([state])
    else:
        print("No solution found.")

if __name__ == "__main__":
    main()

output

Enter the start state of the 8-puzzle (9 numbers, use 0 for the blank tile):
2 8 3 1 6 4 7 0 5
Enter the goal state of the 8-puzzle (9 numbers, use 0 for the blank tile):
1 2 3 8 0 4 7 6 5

Solving the 8-puzzle...


Level 0 (Initial State):
[2, 8, 3]    
[1, 6, 4]    
[7, 0, 5]    
g(n) = 0, h(n) = 5, f(n) = 5


Level 1:
[2, 8, 3]    
[1, 0, 4]    
[7, 6, 5]    
g(n) = 1, h(n) = 4, f(n) = 5

[2, 8, 3]    
[1, 6, 4]    
[0, 7, 5]    
g(n) = 1, h(n) = 6, f(n) = 7

[2, 8, 3]    
[1, 6, 4]    
[7, 5, 0]    
g(n) = 1, h(n) = 6, f(n) = 7


Level 2:
[2, 0, 3]    
[1, 8, 4]    
[7, 6, 5]    
g(n) = 2, h(n) = 3, f(n) = 5

[2, 8, 3]    
[0, 1, 4]    
[7, 6, 5]    
g(n) = 2, h(n) = 5, f(n) = 7

[2, 8, 3]    
[1, 4, 0]    
[7, 6, 5]    
g(n) = 2, h(n) = 5, f(n) = 7


Level 3:
[0, 2, 3]    
[1, 8, 4]    
[7, 6, 5]    
g(n) = 3, h(n) = 2, f(n) = 5

[2, 3, 0]    
[1, 8, 4]    
[7, 6, 5]    
g(n) = 3, h(n) = 4, f(n) = 7


Level 4:
[1, 2, 3]    
[0, 8, 4]    
[7, 6, 5]    
g(n) = 4, h(n) = 1, f(n) = 5


Level 5:
[1, 2, 3]    
[7, 8, 4]    
[0, 6, 5]    
g(n) = 5, h(n) = 2, f(n) = 7

[1, 2, 3]    
[8, 0, 4]    
[7, 6, 5]    
g(n) = 5, h(n) = 0, f(n) = 5


Solution Path Found!
Step 0:
[2, 8, 3]    
[1, 6, 4]    
[7, 0, 5]    
Step 1:
[2, 8, 3]    
[1, 0, 4]    
[7, 6, 5]    
Step 2:
[2, 0, 3]    
[1, 8, 4]    
[7, 6, 5]    
Step 3:
[0, 2, 3]    
[1, 8, 4]    
[7, 6, 5]    
Step 4:
[1, 2, 3]    
[0, 8, 4]    
[7, 6, 5]    
Step 5:
[1, 2, 3]    
[8, 0, 4]    
[7, 6, 5]  
